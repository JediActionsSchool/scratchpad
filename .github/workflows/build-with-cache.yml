name: Node.js CI - WITH CACHE

# Bu workflow ile "build-with-no-cache" workflow'unda kullanmadigimiz cache mekanizmasini kullanarak build islemini gerceklestirecegiz.
# Boylece, her seferinde node_modules klasorunu yeniden olusturmak yerine, cache mekanizmasi sayesinde daha hizli bir build islemi gerceklestirecegiz.

on:
  workflow_dispatch:
    inputs:
      use-cache:
        description: Whether to execute cache step
        type: boolean
        default: true
      node-version:
        description: Node version
        type: choice
        options:
          - 18.x
          - 20.x
          - 21.x
        default: latest

  push:

jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: app

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Calculate Cache Key
        id: cache-key
        run: |
          echo "CACHE_KEY=deps-node-modules-${{ hashFiles('app/package-lock.json')}}" >> $GITHUB_OUTPUT
          echo "CACHE_KEY=deps-node-modules-${{ hashFiles('app/package-lock.json')}}" >> $GITHUB_STEP_SUMMARY

      - name: Restore from Cached Dependencies
        id: cache
        uses: actions/cache@v3
        if: ${{ inputs.use-cache }}
        with:
          path: app/node_modules
          key: ${{ steps.cache-key.outputs.CACHE_KEY }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm ci
