name: 08-WORKIN WITH MATRICES
run-name: Working with Matrices

on: [push, workflow_dispatch]
jobs:
  install-dependencies:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16, 18]

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: app

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Cache node modules
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-${{ matrix.node }}
            ${{ runner.os }}-${{ matrix.node }}

      - name: Display Cache Output
        run: echo '${{ toJSON(steps.cache-dependencies.outputs) }}' >> $GITHUB_STEP_SUMMARY

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "${{ matrix.node }}"

      - name: Install Dependencies
        if: steps.cache-dependencies.outputs.cache-hit != true
        run: npm install

      - name: Display Checkout Directory
        run: ${{ matrix.os == 'windows-latest' && 'dir' || 'ls -la' }}

  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16, 18]

    runs-on: ${{ matrix.os }}
    needs: [install-dependencies]
    defaults:
      run:
        working-directory: app

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Display Checkout Directory
        run: ${{ matrix.os == 'windows-latest' && 'dir' || 'ls -la' }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "${{ matrix.node }}"

      - name: Cache node modules
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-${{ matrix.node }}
            ${{ runner.os }}-${{ matrix.node }}

      - name: Display Cache Output
        run: echo '${{ toJSON(steps.cache-dependencies.outputs) }}'

      - name: Install Dependencies
        if: steps.cache-dependencies.outputs.cache-hit != true
        run: npm install

      - name: Build Project
        run: npm run build

  test-and-upload-artefact:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16, 18]

    runs-on: ${{ matrix.os }}
    needs: [build]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Display Checkout Directory
        working-directory: app/
        run: ${{ matrix.os == 'windows-latest' && 'dir' || 'ls -la' }}

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: "${{ matrix.node }}"

      - name: Cache node modules
        id: cache-dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-cache-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-${{ matrix.node }}
            ${{ runner.os }}-${{ matrix.node }}

      - name: Install Dependencies
        working-directory: app
        if: steps.cache-dependencies.outputs.cache-hit != true
        run: npm install

      - name: Display Cache Output
        run: echo '${{ toJSON(steps.cache-dependencies.outputs) }}'

      - name: Run Tests
        id: test
        working-directory: app
        run: npx jest

      - name: Display Cache Output
        run: echo '${{ toJSON(steps.cache-dependencies.outputs) }}'

      - name: Upload Artefact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: code-coverage-${{ matrix.os }}-${{ matrix.node }}
          path: app/coverage
          retention-days: 1
  download-artefact:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [16, 18]

    runs-on: ${{ matrix.os }}
    needs: [test-and-upload-artefact]

    steps:
      - name: Download Artefact
        uses: actions/download-artifact@v3
        with:
          name: code-coverage--${{ matrix.os }}-${{ matrix.node }}
          path: code-coverage-report
#   delete-artefact:
#     runs-on: ubuntu-latest
#     needs: [download-artefact]
#     steps:
#       - name: Delete Artefact
#         uses: geekyeggo/delete-artifact@v2
#         with:
#           name: code-coverage
